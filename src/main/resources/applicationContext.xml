<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
	        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/aop
	        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">

        <property name="templateLoaderPath" value="/WEB-INF/ftl/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="number_format">0.##########</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">ignore</prop>
            </props>
        </property>
    </bean>

    <!-- 自动扫描 -->
    <context:component-scan base-package="oops.oral"/>

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!--初始化连接大小-->
        <property name="initialSize" value="${initialSize}"></property>
        <!--连接池最大数量-->
        <property name="maxActive" value="${maxActive}"></property>
        <!--连接池最大空闲-->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!--连接池最小空闲-->
        <property name="minIdle" value="${minIdle}"></property>
        <!--获取连接最大等待时间-->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="namingStrategy">
            <bean class="oops.oral.other.SaturnNamingStrategy" />
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=false
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
                hibernate.show_sql=true
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
        <property name="configLocations">
            <value>classpath:hibernate-framework.cfg.xml</value>
        </property>
    </bean>

    <!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
    <!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
    <!-- 并注入SessionFactory的引用 -->
    <bean id="transactionManager" class=
            "org.springframework.orm.hibernate3.HibernateTransactionManager"
          p:sessionFactory-ref="sessionFactory"/>

    <!-- 配置事务增强处理Bean,指定事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 用于配置详细的事务语义 -->
        <tx:attributes>
            <!-- 其他方法使用默认的事务设置 -->
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="commonPointcut" expression="execution(* oops.saturn.manager..*.*(..))"/>
        <!-- 指定在rbPointcut切入点应用txAdvice事务增强处理 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="commonPointcut"/>
    </aop:config>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        &lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;
        <property name="mapperLocations" value="classpath:mapping/*.xml"></property>
    </bean>-->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="oops.oral.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>-->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <!--<bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>-->



    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list >
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>

    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
</beans>